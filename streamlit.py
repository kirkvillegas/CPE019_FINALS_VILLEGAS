# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xx3EWPxnVZlRdxISN9cmMvVZLlGSUgMx

Executing the installation cell first to ensure that the `streamlit` library is available.
"""

!pip install streamlit

"""Now that `streamlit` is installed, I will run the Streamlit app code."""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image, ImageOps

st.markdown("""
    <style>
    .stApp { background: #111111 !important; color: #fafafa !important; }
    .stTextInput, .stFileUploader, .stSelectbox, .stTextArea,
    .stMarkdown, .css-1v0mbdj,
    .css-1v0mbdj p, .css-1v0mbdj h1, .css-1v0mbdj h2, .css-1v0mbdj h3 {
        color: #fafafa !important;
    }
    </style>
""", unsafe_allow_html=True)

MODEL_PATH = '/content/drive/MyDrive/STREAMLIT FOLDER/your_model_directory_name'

@st.cache_resource
def get_model():
    try:
        return tf.keras.layers.TFSMLayer(MODEL_PATH, call_endpoint='serving_default')
    except Exception as e:
        st.error(f"Error loading model from {MODEL_PATH}. Please ensure the path is correct and the directory contains 'saved_model.pb'.")
        st.stop()

model = get_model()

st.title("üå¶Ô∏è Multiclass Weather Prediction")
st.write(
    "Upload a weather image and this app will classify it as "
    "**Cloudy**, **Rain**, **Shine**, or **Sunrise**."
)

uploaded_file = st.file_uploader(
    "Choose a weather image (jpg, jpeg, png):", type=["jpg", "jpeg", "png"]
)

def predict_weather(image: Image.Image, model) -> (str, float):
    target_size = (75, 75)
    processed_img = ImageOps.fit(image, target_size, Image.Resampling.LANCZOS)
    img_arr = np.asarray(processed_img).astype("float32") / 255.0
    batch = np.expand_dims(img_arr, axis=0)

    try:
        preds = model(batch)['output_0']
    except KeyError:
        st.error("Model output key 'output_0' not found. Please check your model's serving signature.")
        return "Error", 0.0
    except Exception as e:
        st.error(f"Prediction error: {e}")
        return "Error", 0.0

    class_labels = ['Cloudy', 'Rain', 'Shine', 'Sunrise']
    idx = int(np.argmax(preds))
    pred_class = class_labels[idx]
    confidence = float(np.max(preds)) * 100
    return pred_class, confidence

if uploaded_file:
    img = Image.open(uploaded_file)
    st.image(img, caption="Uploaded Image", use_container_width=True)
    pred_class, conf = predict_weather(img, model)

    if pred_class == "Cloudy":
        st.success(f"‚òÅÔ∏è **Prediction:** {pred_class}")
    elif pred_class == "Rain":
        st.success(f"üåßÔ∏è **Prediction:** {pred_class}")
    elif pred_class == "Shine":
        st.success(f"‚òÄÔ∏è **Prediction:** {pred_class}")
    elif pred_class == "Sunrise":
        st.success(f"üåÖ **Prediction:** {pred_class}")
    else:
        st.success(f"**Prediction:** {pred_class}")

    st.info(f"**Model Confidence:** {conf:.2f}%")
else:
    st.info("Upload an image to begin.")